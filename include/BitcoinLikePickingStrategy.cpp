// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from bitcoin_like_wallet.djinni

#include "BitcoinLikePickingStrategy.hpp"  // my header
#include "enum_from_string.hpp"

namespace ledger { namespace core { namespace api {

std::string to_string(const BitcoinLikePickingStrategy& bitcoinLikePickingStrategy) {
    switch (bitcoinLikePickingStrategy) {
        case BitcoinLikePickingStrategy::DEEP_OUTPUTS_FIRST: return "DEEP_OUTPUTS_FIRST";
        case BitcoinLikePickingStrategy::OPTIMIZE_SIZE: return "OPTIMIZE_SIZE";
        case BitcoinLikePickingStrategy::MERGE_OUTPUTS: return "MERGE_OUTPUTS";
        case BitcoinLikePickingStrategy::BEST_PRIVACY: return "BEST_PRIVACY";
    };
};
template <>
BitcoinLikePickingStrategy from_string(const std::string& bitcoinLikePickingStrategy) {
    if (bitcoinLikePickingStrategy == "DEEP_OUTPUTS_FIRST") return BitcoinLikePickingStrategy::DEEP_OUTPUTS_FIRST;
    else if (bitcoinLikePickingStrategy == "OPTIMIZE_SIZE") return BitcoinLikePickingStrategy::OPTIMIZE_SIZE;
    else if (bitcoinLikePickingStrategy == "MERGE_OUTPUTS") return BitcoinLikePickingStrategy::MERGE_OUTPUTS;
    else return BitcoinLikePickingStrategy::BEST_PRIVACY;
};

std::ostream &operator<<(std::ostream &os, const BitcoinLikePickingStrategy &o)
{
    switch (o) {
        case BitcoinLikePickingStrategy::DEEP_OUTPUTS_FIRST:  return os << "DEEP_OUTPUTS_FIRST";
        case BitcoinLikePickingStrategy::OPTIMIZE_SIZE:  return os << "OPTIMIZE_SIZE";
        case BitcoinLikePickingStrategy::MERGE_OUTPUTS:  return os << "MERGE_OUTPUTS";
        case BitcoinLikePickingStrategy::BEST_PRIVACY:  return os << "BEST_PRIVACY";
    }
}

} } }  // namespace ledger::core::api
